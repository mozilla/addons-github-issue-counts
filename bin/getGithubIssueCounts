#!/usr/bin/env node

// Magically require any env variables defined in a local .env file.
require('dotenv').config();
// Polyfill fetch.
require('isomorphic-fetch');
const ApolloBoost = require('apollo-boost');
const ApolloClient = ApolloBoost.default;
const gql = require('graphql-tag').default;
const Influx = require('influx');

const headers = {};
if (process.env.GH_TOKEN) {
  headers.Authorization = `token ${process.env.GH_TOKEN}`;
} else {
  console.error('No env var GH_TOKEN found');
  process.exit(1);
}

let influxEnvVarErrorFlag = false;

for (const key of ['HOST', 'PORT', 'DATABASE', 'USER', 'PASSWORD']) {
  if (!process.env[`INFLUX_DB_${key}`]) {
    console.error(`No env var for INFLUX_DB_${key} provided`);
    influxEnvVarErrorFlag = true;
  }
}
if (influxEnvVarErrorFlag) {
  process.exit(1);
}

const client = new ApolloClient({
  uri: 'https://api.github.com/graphql',
  headers,
});


const influx = new Influx.InfluxDB({
  host: process.env.INFLUX_DB_HOST,
  protocol: 'https',
  port: parseInt(process.env.INFLUX_DB_PORT, 10),
  database: process.env.INFLUX_DB_DATABASE,
  username: process.env.INFLUX_DB_USER,
  password: process.env.INFLUX_DB_PASSWORD,
  schema: [
    {
      measurement: 'addons-gh-issue-counts',
      fields: {
        'priority-p1': Influx.FieldType.INTEGER,
        'priority-p2': Influx.FieldType.INTEGER,
        'priority-p3': Influx.FieldType.INTEGER,
        'priority-p4': Influx.FieldType.INTEGER,
        'priority-p5': Influx.FieldType.INTEGER,
        'component-code-quality': Influx.FieldType.INTEGER,
        'type-papercut': Influx.FieldType.INTEGER,
      },
      tags: [
        'repo'
      ]
    }
  ]
});

const repos = [
  'addons',
  'addons-server',
  'addons-frontend',
  'addons-linter',
  'addons-code-manager',
];

const issueQuery = gql`
  query getIssueCounts($repo: String!) {
    repository(owner: "mozilla", name: $repo) {
      priority_p1: issues(states: OPEN, labels: ["priority: p1"]) {
        totalCount
      }
      priority_p2: issues(states: OPEN, labels: ["priority: p2"]) {
        totalCount
      }
      priority_p3: issues(states: OPEN, labels: ["priority: p3"]) {
        totalCount
      }
      priority_p4: issues(states: OPEN, labels: ["priority: p4"]) {
        totalCount
      }
      priority_p5: issues(states: OPEN, labels: ["priority: p5"]) {
        totalCount
      }
      component_code_quality: issues(states: OPEN, labels: ["component: code quality"]) {
        totalCount
      }
      type_papercut: issues(states: OPEN, labels: ["type: papercut"]) {
        totalCount
      }
    }
    rateLimit {
      limit
      cost
      remaining
      resetAt
    }
  }
`;

const combinedData = {};
requests = [];

for (const repo of repos) {
  requests.push(client.query({
    query: issueQuery,
    variables: { repo },
  }).then((result) => {
    const newData = {};
    Object.keys(result.data.repository).forEach((key, idx) => {
      if (key !== '__typename') {
        newData[key.replace(/_/g, '-')] = result.data.repository[key].totalCount;
      }
    });
    combinedData[repo] = newData;
  }));
};

Promise.all(requests)
  .then(() => {
    //console.log(JSON.stringify(combinedData, null, 2));
    const metricList = [];
    Object.keys(combinedData).forEach((repo, idx) => {
      metricList.push({
        measurement: 'addons-gh-issue-counts',
        fields: { ...combinedData[repo] },
        tags: { repo },
      })
    });
    //console.log(JSON.stringify(metricList, null, 2));
    return influx.writePoints(metricList);
  });

